"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { 
  Building2, 
  Save, 
  Loader2, 
  Info,
  Factory,
  Package,
  FileText,
  AlertCircle,
  ArrowLeft
} from "lucide-react"
import { useAuth } from "@/contexts/simple-auth-context"
import { toast } from "sonner"
import { useRouter } from "next/navigation"
import Link from "next/link"

interface OrganizationData {
  id: string
  name: string
  company_overview: string | null
  industry: string | null
  product_service: string | null
  ai_context_summary: string | null
}

export default function OrganizationSettingsPage() {
  const [organization, setOrganization] = useState<OrganizationData | null>(null)
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [formData, setFormData] = useState({
    name: "",
    company_overview: "",
    industry: "",
    product_service: ""
  })
  const [tokenCount, setTokenCount] = useState<number | null>(null)
  const { user, getAuthHeaders } = useAuth()
  const router = useRouter()

  // Fetch organization data
  const fetchOrganization = async () => {
    try {
      const authHeaders = await getAuthHeaders()
      const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3001"
      
      // Get organization ID from user context
      const organizationId = user?.organizationId || user?.organization?.id
      
      console.log("[OrganizationSettings] Organization ID from user context:", organizationId)
      
      if (!organizationId) {
        toast.error("No organization found")
        router.push("/organization-setup")
        return
      }
      
      // Fetch organization details
      console.log("[OrganizationSettings] Fetching organization:", `${API_BASE_URL}/api/organizations/${organizationId}`)
      const orgResponse = await fetch(`${API_BASE_URL}/api/organizations/${organizationId}`, {
        headers: authHeaders
      })
      
      if (!orgResponse.ok) {
        const errorText = await orgResponse.text()
        console.error("[OrganizationSettings] Failed to fetch organization:", orgResponse.status, errorText)
        throw new Error("Failed to fetch organization data")
      }
      
      const orgData = await orgResponse.json()
      console.log("[OrganizationSettings] Organization data received:", orgData)
      setOrganization(orgData)
      setFormData({
        name: orgData.name || "",
        company_overview: orgData.company_overview || "",
        industry: orgData.industry || "",
        product_service: orgData.product_service || ""
      })
      
      // Calculate approximate token count for display
      const fullContext = `Company: ${orgData.name}. Industry: ${orgData.industry || 'Not specified'}. ${orgData.company_overview || ''} ${orgData.product_service || ''}`.trim()
      // Approximate: 1 token â‰ˆ 4 characters
      setTokenCount(Math.ceil(fullContext.length / 4))
      
    } catch (error) {
      console.error("Error fetching organization:", error)
      toast.error("Failed to load organization data")
    } finally {
      setLoading(false)
    }
  }

  // Save organization changes
  const handleSave = async () => {
    if (!organization) return
    
    setSaving(true)
    try {
      const authHeaders = await getAuthHeaders()
      const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3001"
      
      const response = await fetch(`${API_BASE_URL}/api/organizations/${organization.id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          ...authHeaders
        },
        body: JSON.stringify({
          name: formData.name,
          company_overview: formData.company_overview || null,
          industry: formData.industry || null,
          product_service: formData.product_service || null
        })
      })
      
      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.message || "Failed to update organization")
      }
      
      const updatedOrg = await response.json()
      setOrganization(updatedOrg)
      
      // Update token count
      const fullContext = `Company: ${updatedOrg.name}. Industry: ${updatedOrg.industry || 'Not specified'}. ${updatedOrg.company_overview || ''} ${updatedOrg.product_service || ''}`.trim()
      setTokenCount(Math.ceil(fullContext.length / 4))
      
      toast.success("Organization information updated successfully! AI context has been regenerated.")
      
    } catch (error) {
      console.error("Error updating organization:", error)
      toast.error((error as Error).message || "Failed to update organization")
    } finally {
      setSaving(false)
    }
  }

  useEffect(() => {
    if (user) {
      fetchOrganization()
    }
  }, [user])

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
      </div>
    )
  }

  if (!organization) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Card className="max-w-md bg-white border-gray-200">
          <CardContent className="pt-6">
            <p className="text-center text-muted-foreground">Organization not found</p>
          </CardContent>
        </Card>
      </div>
    )
  }

  // Debug log to see what data we have
  console.log("[OrganizationSettings] Rendering with data:", {
    organization,
    formData,
    tokenCount
  })

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-8 max-w-4xl">
      {/* Header */}
      <div className="mb-8">
        <Link href="/organization" className="inline-flex items-center text-sm text-muted-foreground hover:text-primary mb-4">
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Organization
        </Link>
        
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">Organization Settings</h1>
            <p className="text-muted-foreground mt-2">
              Manage your organization information and AI context
            </p>
          </div>
          <Building2 className="h-10 w-10 text-blue-500" />
        </div>
      </div>

      {/* AI Context Summary Card */}
      {organization.ai_context_summary && (
        <Card className="mb-6 bg-white border-blue-200">
          <CardHeader>
            <CardTitle className="text-lg flex items-center">
              <Info className="h-5 w-5 mr-2 text-blue-600" />
              Current AI Context
            </CardTitle>
            <CardDescription>
              This is the context that your AI assistant uses in every conversation
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="rounded-lg bg-white p-4 border border-blue-200">
              <p className="text-sm font-mono">{organization.ai_context_summary}</p>
              <div className="mt-2 flex items-center justify-between">
                <span className="text-xs text-muted-foreground">
                  Token count: {tokenCount !== null ? (
                    <span className={tokenCount > 50 ? "text-orange-600 font-semibold" : "text-green-600 font-semibold"}>
                      {tokenCount} / 50 tokens
                    </span>
                  ) : "calculating..."}
                </span>
                {tokenCount && tokenCount > 50 && (
                  <span className="text-xs text-orange-600 flex items-center">
                    <AlertCircle className="h-3 w-3 mr-1" />
                    Will be automatically summarized
                  </span>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Organization Information Form */}
      <Card className="bg-white border-gray-200">
        <CardHeader>
          <CardTitle>Organization Information</CardTitle>
          <CardDescription>
            Update your organization details. This information will be used to provide context to your AI assistant.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Organization Name */}
          <div className="space-y-2">
            <Label htmlFor="name" className="flex items-center">
              <Building2 className="h-4 w-4 mr-2 text-blue-500" />
              Organization Name
            </Label>
            <Input
              id="name"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              placeholder="Your organization name"
              disabled={saving}
            />
          </div>

          {/* Industry */}
          <div className="space-y-2">
            <Label htmlFor="industry" className="flex items-center">
              <Factory className="h-4 w-4 mr-2 text-blue-500" />
              Industry
            </Label>
            <Input
              id="industry"
              value={formData.industry}
              onChange={(e) => setFormData({ ...formData, industry: e.target.value })}
              placeholder="e.g., Real Estate, Technology, Healthcare..."
              disabled={saving}
            />
            <p className="text-xs text-muted-foreground">
              Specify your industry to help the AI understand your business context
            </p>
          </div>

          {/* Company Overview */}
          <div className="space-y-2">
            <Label htmlFor="company_overview" className="flex items-center">
              <FileText className="h-4 w-4 mr-2 text-blue-500" />
              Company Overview
            </Label>
            <Textarea
              id="company_overview"
              value={formData.company_overview}
              onChange={(e) => setFormData({ ...formData, company_overview: e.target.value })}
              placeholder="Describe your company's mission, values, and what makes you unique..."
              rows={4}
              disabled={saving}
              className="resize-none"
            />
            <p className="text-xs text-muted-foreground">
              A brief description of your company and its mission
            </p>
          </div>

          {/* Product/Service */}
          <div className="space-y-2">
            <Label htmlFor="product_service" className="flex items-center">
              <Package className="h-4 w-4 mr-2 text-blue-500" />
              Products & Services
            </Label>
            <Textarea
              id="product_service"
              value={formData.product_service}
              onChange={(e) => setFormData({ ...formData, product_service: e.target.value })}
              placeholder="Describe your main products or services, target customers, and value proposition..."
              rows={4}
              disabled={saving}
              className="resize-none"
            />
            <p className="text-xs text-muted-foreground">
              What products or services does your organization offer?
            </p>
          </div>

          {/* Important Note */}
          <div className="rounded-lg bg-blue-50 p-4 border border-blue-200">
            <div className="flex items-start space-x-2">
              <Info className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
              <div className="space-y-1">
                <p className="text-sm font-medium text-blue-900">
                  AI Context Generation
                </p>
                <p className="text-sm text-blue-700">
                  When you save changes, this information will be automatically processed into a concise context 
                  (maximum 50 tokens) that your AI assistant will use in every conversation. This helps the AI 
                  provide more relevant and personalized responses for your business.
                </p>
              </div>
            </div>
          </div>

          {/* Save Button */}
          <div className="flex justify-end pt-4">
            <Button
              onClick={handleSave}
              disabled={saving || !formData.name.trim()}
              className="min-w-[120px]"
            >
              {saving ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Saving...
                </>
              ) : (
                <>
                  <Save className="mr-2 h-4 w-4" />
                  Save Changes
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>
      </div>
    </div>
  )
}